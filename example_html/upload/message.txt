	"cpp snippets":
    {
        "prefix" : "GUSCOM",
                   "body" : [
						"# include \"${TM_FILENAME_BASE}.hpp\"",
						"",
						"//!------------------------------CONSTRUCTOR----------------------------------",
						"",
						"${TM_FILENAME_BASE}::${TM_FILENAME_BASE}()",
						"{",
						"",
						"}",
						"",
						"${TM_FILENAME_BASE}::${TM_FILENAME_BASE}(const ${TM_FILENAME_BASE}& copy)",
						"{",
						"if (this != &copy)",
						"{",
						"\t*this = copy;",
						"}",
						"}",
						"",
						"//!------------------------------DESTRUCTOR-----------------------------------",
						"",
						"${TM_FILENAME_BASE}::~${TM_FILENAME_BASE}()",
						"{",
						"",
						"}",
						"",
						"//!------------------------------OPERATOR-------------------------------------",
						"",
						"${TM_FILENAME_BASE}\t&\t${TM_FILENAME_BASE}::operator=(const ${TM_FILENAME_BASE}& copy)",
						"{",
						"if (this != &copy)",
						"{",
						"(void)copy;",
						"}",
						"\treturn(*this);",
						"}",
						"",
						"//!------------------------------FUNCTION-------------------------------------",
  
                   ],
                            "description" : "c++ basic"
    },
	"cpp snippets 2":
	{
		"prefix" : "GUSMAIN",
				   "body" : [
					   "# include <iostream>",
					   "# include <string>",
					   "# include <vector>",
					   "",
					   "int main()",
					   "{",
					   "    return 0;",
					   "}"
	
				   ],
							"description" : "c++ basic"
	},
	"cpp snippets 3":
	{

		"prefix" : "GUSHEADER",
				   "body" : [
						"#ifndef ${TM_FILENAME_BASE/.*/${0:/upcase}/}_HPP",
						"# define ${TM_FILENAME_BASE/.*/${0:/upcase}/}_HPP",
						"# include <iostream>",
						"# include <string>",
						"# include <limits.h>",
						"# include <iterator>",
						"# include <vector>",
						"# include <deque>",
						"# include <list>",
						"# include <map>",
						"# include <set>",
						"# include <array>",
						"# include <algorithm>",
						"",
						"class ${TM_FILENAME_BASE}",
						"{",
						"\tpublic:",
						"\t\t${TM_FILENAME_BASE}();",
						"\t\t${TM_FILENAME_BASE}(const ${TM_FILENAME_BASE} & copy);",
						"",
						"\t\t~${TM_FILENAME_BASE}();",
						"",
						"\t\t${TM_FILENAME_BASE} & operator=(const ${TM_FILENAME_BASE} & copy);",
						"\tprivate:",
						"};",
						"",
						"#endif",
	
				   ],
							"description" : "c++ basic"
	},
	"cpp snippets 4":
	{
		"prefix" : "GUSTPP",
				   "body" : [
						"#ifndef ${TM_FILENAME_BASE/.*/${0:/upcase}/}_TPP",
						"# define ${TM_FILENAME_BASE/.*/${0:/upcase}/}_TPP",
						"",
						"template <typename T>",
						"class ${TM_FILENAME_BASE}",
						"{",
						"\tpublic:",
						"\t\t${TM_FILENAME_BASE}();",
						"\t\t${TM_FILENAME_BASE}(const ${TM_FILENAME_BASE} & copy);",
						"",
						"\t\t~${TM_FILENAME_BASE}();",
						"",
						"\t\t${TM_FILENAME_BASE} & operator=(const ${TM_FILENAME_BASE} & copy);",
						"\tprivate:",
						"};",
						"",
						"//!------------------------------CONSTRUCTOR----------------------------------",
						"",
						"template <typename T>",
						"${TM_FILENAME_BASE}<T>::${TM_FILENAME_BASE}()",
						"{",
						"",
						"}",
						"",
						"template <typename T>",
						"${TM_FILENAME_BASE}<T>::${TM_FILENAME_BASE}(const ${TM_FILENAME_BASE}& copy)",
						"{",
						"if (this != &copy)",
						"{",
						"\t*this = copy;",
						"}",
						"}",
						"",
						"//!------------------------------DESTRUCTOR-----------------------------------",
						"",
						"template <typename T>",
						"${TM_FILENAME_BASE}<T>::~${TM_FILENAME_BASE}()",
						"{",
						"",
						"}",
						"",
						"//!------------------------------OPERATOR-------------------------------------",
						"",
						"template <typename T>",
						"${TM_FILENAME_BASE}<T>\t&\t${TM_FILENAME_BASE}::operator=(const ${TM_FILENAME_BASE}<T> & copy)",
						"{",
						"if (this != &copy)",
						"{",
						"(void)copy;",
						"\treturn(*this);",
						"}",
						"}",
						"",
						"//!------------------------------FUNCTION-------------------------------------",
						"#endif",
				   ],
							"description" : "c++ basic"
	}
